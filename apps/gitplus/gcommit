#!/bin/ghtml -df

<html>
<head>
<title>Git - Commit</title>
<style>

* {
	font-size: 10pt;
}

.accelerator {
	text-decoration: inherit;
}

</style>

<script type=text/javascript>

init = exec("git rev-parse --show-prefix");

if (init.status) {
	console.error("not a git repository path");
	quit(1);
}

var path = init.stdout;

puts(path);

if ( ! path.length ) {
	console.error("Cannot commit: you are not in a git repository.");
	quit(1);
}

chdir(exec("git rev-parse --show-cdup").stdout.replace(/\n$/, ""));

path = exec("pwd").stdout;

var status = exec("git status -suno").stdout;

if (status.length == 0) {
	console.error("failed to retrieve status...");
	quit(1);
}

var branch_info = exec("git branch");
var currentBranch = gitCurrentBranch();

document.title += ": " + currentBranch;

var modifications = status.split(/\n/);
var W, H;

function mode_changed() {
	if (gitCommitMode.value.match(/^List /)) {
		with (files.style) {
			marginTop = "5px"; marginBottom = "5px"; 
			paddingLeft = "10px"; paddingTop = "10px";
			visibility = "visible";
			height = "57px"; 
		}
		window.resizeTo(document.width + 5, document.height + 5);
		outputSelected(document.forms[0]['file']);
	} else {
		with (files.style) {
			margin = "0"; padding: 0; visibility = "hidden"; height = 0;
		}
		window.resizeTo(W, H + 10);
	}
	if (gitCommitMode.value == "All") {
		gitArg.value = "-a";
	}
}

function getSelected(opt) {
	var selected = new Array();
	var index = 0;
	for (var intLoop = 0; intLoop < opt.length; intLoop++) {
	   if ((opt[intLoop].selected) ||
		   (opt[intLoop].checked)) {
		  index = selected.length;
		  selected[index] = new Object;
		  selected[index].value = opt[intLoop].value;
		  selected[index].index = intLoop;
	   }
	}
	return selected;
}

function outputSelected(opt) {
	var sel = getSelected(opt);
	gitCommitMode.item(gitCommitMode.selectedIndex).text = "List (" + sel.length + "/" + (modifications.length - 1) + ")";
	var strSel = "";
	for (var item in sel)       
	   strSel += "'" + sel[item].value + "' ";
	gitArg.value = strSel;
}

function build_selections() {

	var option;

	pwd.innerHTML = "<b>Path:&nbsp;</b>" + path;

	if (modifications.length == 2) {
		option = document.createElement("option");
		option.text = "File";
		option.selected = true;
		gitCommitMode.add(option, null);
		gitArg.value = "'" + modifications[0].substr(3).replace(/ -\>.+/, "") + "'";
	} else {

		option = document.createElement("option");
		option.text = "All";
		option.selected = true;
		gitCommitMode.add(option, null);

		option = document.createElement("option");
		option.text = "List (0/" + (modifications.length - 1) + ")";

		gitCommitMode.add(option, null);

		var checkboxes = "";
		for(var i = 0, len = modifications.length - 1; i < len; i++) {
			var thisMod = modifications[i].substr(3).replace(/ -\>.+/, "");
			checkboxes += "<label><INPUT onclick=\"outputSelected(this.form.file);\" TYPE=CHECKBOX NAME='file' VALUE='" + thisMod + "'>" + thisMod + "</label><br>";
		}
		files.innerHTML = "<form>" + checkboxes + "</form>"

	}

	gitCommitMode.onchange = mode_changed;
	gitCommitMode.onchange();

}

function bodyOnLoad() {
	build_selections();
	W = document.width + 5;
	H = document.height + 5;
	window.resizeTo(W, H);
	gitMessage.focus();
}

function gitCurrentBranch() {
	var branches = branch_info.stdout.split(/\n/);
	for(var i = 0, len = branches.length; i < len; i++) {
		if (branches[i].match(/^\* /)) return branches[i].replace(/\* /, "");
	}
}

function shellQuote(val) {
	return '"' + val.replace(/\"/g, '\\"') + '"'
}

function gitCommit(mode, file, message) {
	// mode: path|arguments
	var result;
	if ( ! message ) {
		alert("You must supply a commit message.");
		gitMessage.focus();
		return;
	}
	if ( ! file ) {
		alert("You must select one or more files to commit.");
		gitArg.focus();
		return;
	}

	result = console.exec("git commit -m " + shellQuote(message) + " " + file);

	if (result == 0 && gitPush.checked) {
		result = console.exec("git push");
	}

	quit(result);

}


function keydown(e)
{
	if (e.keyCode == 18) {
		showAccelerators();
	}

}

function showAccelerators() {
	var accelerators = document.getElementsByClassName('accelerator');
	for (var i = 0; i < accelerators.length; ++i) {
		var item = accelerators[i];
		item.style.textDecoration = 'underline';
	}		
}

function hideAccelerators() {
	var accelerators = document.getElementsByClassName('accelerator'); for (var i = 0; i < accelerators.length; ++i) { var item = accelerators[i]; item.style.textDecoration = 'inherit'; }		
}

function keyup(e)
{
	if (e.keyCode == 18) {
		hideAccelerators();
	}
}

window.addEventListener("blur", function() { hideAccelerators(); }, false);
window.addEventListener("keydown",function() { keydown(event); },false);
window.addEventListener("keyup",keyup,false);

function describeStatusLine(line) {

	  result = line.replace(/^ D /, 'Deleted ');
	result = result.replace(/^R  /, 'Renamed ');
	result = result.replace(/^A  /, 'Added ');
	result = result.replace(/^ M /, 'Modified ');

	return result + "\n";

}

function insertStatus() {

	var listMode = gitCommitMode.value.match(/^List /);

	var lines = modifications;
	for(var i = 0, len = lines.length - 1; i < len; i++) {
		if (listMode) {
			if (document.forms[0].file[i].checked) {
				gitDetails.value += describeStatusLine(lines[i]);
			}
		} else {
			gitDetails.value += describeStatusLine(lines[i]);
		}
	}

	gitDetails.focus();
	
}

</script>

</head>
<body onload="bodyOnLoad();">
<table>
<tr><td id=pwd></tr></td>
<tr><td nowrap=nowrap>
<select id=gitCommitMode style="width: 100px;">
</select>
<input id=gitArg style="width:400;" readonly><br>
</td></tr>
<tr><td><div id=files style="border-radius: 9px; border-color: #aaa; border-style: solid; border-width: 1px; overflow-x: hidden; overflow-y: auto"></div></tr></td>
<tr><td><label><b><span class=accelerator>M</span>essage:</b>&nbsp;<input type=text style="width: 430px;" id=gitMessage accesskey=m></label></tr></td>
<tr><td>
<b><span class=accelerator>D</span>etails:</b><br>
<textarea cols=60 rows=10 accessKey=d id=gitDetails></textarea></td></tr>
<tr><td>
<button type=button accessKey=s onclick="insertStatus();">Insert <span class=accelerator>s</span>tatus</button>
<button type=button accessKey=a onclick="gitDetails.value += exec('xsel -o -b').stdout;">P<span class=accelerator>a</span>ste</button>
<button type=button accessKey=r onclick="gitDetails.value += exec(prompt('Command')).stdout;"><span class=accelerator>R</span>un...</button>
<br><br><input id=gitPush type=checkbox accessKey=p>
<label for=gitPush><span class=accelerator>p</span>ush remote</label>
</td></tr>
</table>
<div style="width: 100%" align=right>
<button id=commitButton type=button accessKey=c onclick="gitCommit(gitCommitMode.value, gitArg.value, (gitMessage.value + '\n\n' + gitDetails.value).trim());">
<span class=accelerator>C</span>ommit</button>
</div>
</body>
</html>
